# automatically generated by the FlatBuffers compiler, do not modify

# namespace: _Element

import flatbuffers

class Anonymous0(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAnonymous0(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Anonymous0()
        x.Init(buf, n + offset)
        return x

    # Anonymous0
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Anonymous0
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Unit import Unit
            obj = Unit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous0
    def Literal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Literal import Literal
            obj = Literal()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Anonymous0Start(builder): builder.StartObject(2)
def Anonymous0AddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def Anonymous0AddLiteral(builder, literal): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(literal), 0)
def Anonymous0End(builder): return builder.EndObject()
